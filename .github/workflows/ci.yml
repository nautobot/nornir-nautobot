---
name: "CI"
on: # yamllint disable
  - "push"
  - "pull_request"
jobs:
  black:
    env:
      INVOKE_LOCAL: "True"
    runs-on: "ubuntu-20.04"
    steps:
      - name: "Check out repository code"
        uses: "actions/checkout@v2"
      - name: "Set up Python"
        uses: "actions/setup-python@v2"
        with:
          python-version: "3.12"
      - name: "Install Python Packages for Linting"
        run: "pip install --upgrade pip wheel invoke toml black"
      - name: "Linting: Black"
        run: "invoke black"
  bandit:
    runs-on: "ubuntu-20.04"
    env:
      INVOKE_LOCAL: "True"
    steps:
      - name: "Check out repository code"
        uses: "actions/checkout@v2"
      - name: "Set up Python"
        uses: "actions/setup-python@v2"
        with:
          python-version: "3.12"
      - name: "Install Python Packages for Linting"
        run: "pip install --upgrade pip wheel invoke toml bandit"
      - name: "Linting: Bandit"
        run: "invoke bandit"
    needs:
      - "black"
  pydocstyle:
    runs-on: "ubuntu-20.04"
    env:
      INVOKE_LOCAL: "True"
    steps:
      - name: "Check out repository code"
        uses: "actions/checkout@v2"
      - name: "Set up Python"
        uses: "actions/setup-python@v2"
        with:
          python-version: "3.12"
      - name: "Install Python Packages for Linting"
        run: "pip install --upgrade pip wheel invoke toml pydocstyle"
      - name: "Linting: pydocstyle"
        run: "invoke pydocstyle"
    needs:
      - "black"
  flake8:
    runs-on: "ubuntu-20.04"
    env:
      INVOKE_LOCAL: "True"
    steps:
      - name: "Check out repository code"
        uses: "actions/checkout@v2"
      - name: "Set up Python"
        uses: "actions/setup-python@v2"
        with:
          python-version: "3.12"
      - name: "Install Python Packages for Linting"
        run: "pip install --upgrade pip wheel invoke toml flake8"
      - name: "Linting: flake8"
        run: "invoke flake8"
    needs:
      - "black"
  yamllint:
    runs-on: "ubuntu-20.04"
    env:
      INVOKE_LOCAL: "True"
    steps:
      - name: "Check out repository code"
        uses: "actions/checkout@v2"
      - name: "Set up Python"
        uses: "actions/setup-python@v2"
        with:
          python-version: "3.12"
      - name: "Install Python Packages for Linting"
        run: "pip install --upgrade pip wheel invoke toml yamllint"
      - name: "Linting: yamllint"
        run: "invoke yamllint"
    needs:
      - "black"
  build:
    runs-on: "ubuntu-20.04"
    steps:
      - name: "Check out repository code"
        uses: "actions/checkout@v2"
      - name: "Set up Python"
        uses: "actions/setup-python@v2"
        with:
          python-version: "3.12"
      - name: "Install Python Packages for Setup"
        run: "pip install invoke poetry toml"
      - name: "Build Container"
        run: "invoke build"
    needs:
      - "bandit"
      - "pydocstyle"
      - "flake8"
      - "yamllint"
  pylint:
    runs-on: "ubuntu-20.04"
    steps:
      - name: "Check out repository code"
        uses: "actions/checkout@v2"
      - name: "Set up Python"
        uses: "actions/setup-python@v2"
        with:
          python-version: "3.12"
      - name: "Install Python Packages for Linting"
        run: "pip install invoke poetry toml"
      - name: "Build Container"
        run: "invoke build"
      - name: "Linting: Pylint"
        run: "invoke pylint"
    needs:
      - "build"
  pytest:
    strategy:
      fail-fast: true
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]
    runs-on: "ubuntu-20.04"
    env:
      PYTHON_VER: "${{ matrix.python-version }}"
    steps:
      - name: "Check out repository code"
        uses: "actions/checkout@v2"
      - name: "Set up Python"
        uses: "actions/setup-python@v2"
        with:
          python-version: "3.12"
      - name: "Install Python Packages for Linting"
        run: "pip install invoke poetry toml"
      - name: "Build Container"
        run: "invoke build"
      - name: "Run Tests"
        run: "invoke pytest"
    needs:
      - "pylint"
  publish_gh:
    name: "Publish to GitHub"
    runs-on: "ubuntu-20.04"
    if: "startsWith(github.ref, 'refs/tags/v')"
    steps:
      - name: "Check out repository code"
        uses: "actions/checkout@v2"
      - name: "Set up Python"
        uses: "actions/setup-python@v2"
        with:
          python-version: "3.12"
      - name: "Install Python Packages for Linting"
        run: "pip install invoke poetry toml"
      - name: "Set env"
        run: "echo RELEASE_VERSION=${GITHUB_REF:10} >> $GITHUB_ENV"
      - name: "Run Poetry Version"
        run: "poetry version $RELEASE_VERSION"
      - name: "Run Poetry Build"
        run: "poetry build"
      - name: "Upload binaries to release"
        uses: "svenstaro/upload-release-action@v2"
        with:
          repo_token: "${{ secrets.GH_NAUTOBOT_BOT_TOKEN }}"
          file: "dist/*"
          tag: "${{ github.ref }}"
          overwrite: true
          file_glob: true
    needs:
      - "pytest"
  publish_pypi:
    name: "Push Package to PyPI"
    runs-on: "ubuntu-20.04"
    if: "startsWith(github.ref, 'refs/tags/v')"
    steps:
      - name: "Check out repository code"
        uses: "actions/checkout@v2"
      - name: "Set up Python"
        uses: "actions/setup-python@v2"
        with:
          python-version: "3.12"
      - name: "Install Python Packages"
        run: "pip install poetry"
      - name: "Set env"
        run: "echo RELEASE_VERSION=${GITHUB_REF:10} >> $GITHUB_ENV"
      - name: "Run Poetry Version"
        run: "poetry version $RELEASE_VERSION"
      - name: "Run Poetry Build"
        run: "poetry build"
      - name: "Push to PyPI"
        uses: "pypa/gh-action-pypi-publish@release/v1"
        with:
          user: "__token__"
          password: "${{ secrets.PYPI_API_TOKEN }}"
    needs:
      - "pytest"
